//
//  InfoTableViewController.swift
//  mtl_asm
//
//  Created by MacBook on 22.06.2023.
//

import UIKit

class PedalInfoTableViewController: UITableViewController {
  var pedal: Pedal!
  let sections = ["About", "How to use"]
  let abouts = ["Count To 5": "    The Count to 5 is a unique take on a compact delay/sampler pedal. It has 3 main modes which allow pitch delays, random sampling and layered looping. To get an idea of the patches take a look through the current manual and also some of the videos here, as well as the count to five megathread on ilovefuzz. Aaron Rusch also made a thorough three part deep dive to help everyone understand each of the modes.", "Too Positive": "    The Too Positive is a stereo overdrive pedal. By using 2 independent drive circuits, it is able to process stereo signals and allows different settings for each channel. \n    It can also be used as a two channel drive for mono signals, a splitter, or a summer due to its flexible signal routing capabilities. \n    The effect can range from colored boost up to a hot overdriven sound. The tone switch adds a mid scoop or high pass filter to give two distinct voicings to the drive. The effect is great for adding some dirt to guitar, synths and drum machines alike.", "PURPLL": "    The PURPLL is a phase-locked loop (PLL) type pedal. It can be used as a fuzzed out harmonizer, drone synth and more. Check out the videos and the manual linked here for more details. \n    We currently have white units available in 2 flavors. One using black metal knobs (Gorva) and the other using the usual white plastic knobs. The metal knobs are shown in the first picture of the gallery and the plastic knobs can be seen in the second picture. At the moment the plastic knobbed units are also blems.", "Your and You're": "    Your and You’re is an over the top synthy fuzz inspired by circuits like the “crash sync” circuit by John Hollis, but rebuilt from the ground up to more easily accept CV or expression pedal. The pedals unique sound is generated by hard syncing an oscillator to the output of a fuzz circuit, and then mixing both outputs together. The result is a rather gated square wave sound with a sort of filter sweep sound when the frequency of the oscillator is adjusted with the tone knob or an expression pedal (or 0-5V control voltage)."]
  let htus = ["Count To 5": "    HTU The Count to 5 is a unique take on a compact delay/sampler pedal. It has 3 main modes which allow pitch delays, random sampling and layered looping. To get an idea of the patches take a look through the current manual and also some of the videos here, as well as the count to five megathread on ilovefuzz. Aaron Rusch also made a thorough three part deep dive to help everyone understand each of the modes.", "Too Positive": "    The Too Positive is a stereo overdrive pedal. By using 2 independent drive circuits, it is able to process stereo signals and allows different settings for each channel. \n    It can also be used as a two channel drive for mono signals, a splitter, or a summer due to its flexible signal routing capabilities. \n    The effect can range from colored boost up to a hot overdriven sound. The tone switch adds a mid scoop or high pass filter to give two distinct voicings to the drive. The effect is great for adding some dirt to guitar, synths and drum machines alike.", "PURPLL": "    The PURPLL is a phase-locked loop (PLL) type pedal. It can be used as a fuzzed out harmonizer, drone synth and more. Check out the videos and the manual linked here for more details. \n    We currently have white units available in 2 flavors. One using black metal knobs (Gorva) and the other using the usual white plastic knobs. The metal knobs are shown in the first picture of the gallery and the plastic knobs can be seen in the second picture. At the moment the plastic knobbed units are also blems.", "Your and You're": "    Your and You’re is an over the top synthy fuzz inspired by circuits like the “crash sync” circuit by John Hollis, but rebuilt from the ground up to more easily accept CV or expression pedal. The pedals unique sound is generated by hard syncing an oscillator to the output of a fuzz circuit, and then mixing both outputs together. The result is a rather gated square wave sound with a sort of filter sweep sound when the frequency of the oscillator is adjusted with the tone knob or an expression pedal (or 0-5V control voltage)."]
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    // Uncomment the following line to preserve selection between presentations
    // self.clearsSelectionOnViewWillAppear = false
    
    // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
    // self.navigationItem.rightBarButtonItem = self.editButtonItem
  }
  
  // MARK: - Table view data source
  
  override func numberOfSections(in tableView: UITableView) -> Int {
    // #warning Incomplete implementation, return the number of sections
//    return sections.count
    return 2
  }
  
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    // #warning Incomplete implementation, return the number of rows
    return 1
  }
  
  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    tableView.register(ControlTableViewCell.self, forCellReuseIdentifier: "InfoText")
    let cell = tableView.dequeueReusableCell(withIdentifier: "InfoText", for: indexPath)
    cell.selectionStyle = .none
    print(pedal.name)
    print("Index path", indexPath)
    if indexPath[0] == 0 {
      cell.textLabel?.text = abouts[pedal.name]
    } else {
      cell.textLabel?.text = htus[pedal.name]
    }
    cell.textLabel?.font = .systemFont(ofSize: 17, weight: .light)
    cell.textLabel?.numberOfLines = 0
    return cell
  }
  
  override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
    return sections[section]
  }
//    let infoTextBlock = UITextView()
//    infoTextBlock.translatesAutoresizingMaskIntoConstraints = false
//    cell.addSubview(infoTextBlock)
//    te
}
